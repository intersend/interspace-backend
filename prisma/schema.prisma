// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(cuid())
  email          String?  @unique
  hashedPassword String? // For traditional email/password auth
  emailVerified  Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Multi-auth support
  authStrategies String? // JSON string of auth methods
  isGuest        Boolean @default(false)
  walletAddress  String? // Primary wallet address (for SIWE)

  // Multi-device support
  devices          DeviceRegistration[]
  refreshTokens    RefreshToken[]

  // Profiles owned by this user
  smartProfiles  SmartProfile[]
  linkedAccounts LinkedAccount[]
  socialProfiles SocialProfile[]

  // Email verifications
  emailVerifications EmailVerification[]

  // Two-factor authentication
  twoFactorEnabled     Boolean   @default(false)
  twoFactorSecret      String? // Encrypted TOTP secret
  twoFactorBackupCodes String? // Encrypted JSON array of backup codes
  twoFactorEnabledAt   DateTime?

  // Passkeys are now stored as Account entries with type='passkey' in V2

  @@map("users")
}

model DeviceRegistration {
  id           String   @id @default(cuid())
  userId       String
  deviceId     String   @unique
  deviceName   String
  deviceType   String // "ios", "android", "web"
  fingerprint  String?
  lastActiveAt DateTime @default(now())
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("device_registrations")
}

model RefreshToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  familyId  String?  // Token family for rotation detection
  expiresAt DateTime
  createdAt DateTime @default(now())
  rotatedAt DateTime? // When this token was rotated

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([familyId])
  @@map("refresh_tokens")
}

model BlacklistedToken {
  id         String   @id @default(cuid())
  token      String   @unique
  tokenType  String   // "access" or "refresh"
  accountId  String
  reason     String   // "logout", "rotation", "security", "password_change"
  expiresAt  DateTime // When the token would have expired naturally
  createdAt  DateTime @default(now())

  account Account @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@index([expiresAt])
  @@map("blacklisted_tokens")
}

model SmartProfile {
  id                   String   @id @default(cuid())
  userId               String
  name                 String
  sessionWalletAddress String   @unique // ERC-7702 proxy address
  isActive             Boolean  @default(false)
  isDevelopmentWallet  Boolean  @default(false) // True if using mock wallet for development
  orbyAccountClusterId String?  @unique
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // Relationships
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  linkedAccounts    LinkedAccount[]
  folders           Folder[]
  apps              BookmarkedApp[]
  transactions      Transaction[]
  auditLogs         AuditLog[]
  preferredGasToken PreferredGasToken?
  orbyVirtualNodes  OrbyVirtualNode[]
  orbyOperations    OrbyOperation[]
  batchOperations   BatchOperation[]
  mpcKeyShare       MpcKeyShare?
  mpcKeyMapping     MpcKeyMapping?
  profileAccounts   ProfileAccount[]   // V2 flat identity relation

  @@map("smart_profiles")
}

model LinkedAccount {
  id           String   @id @default(cuid())
  userId       String
  profileId    String?
  address      String // Removed @unique to allow same EOA in multiple profiles
  authStrategy String // "wallet", "social", etc.
  walletType   String? // "metamask", "coinbase", "walletconnect", etc.
  customName   String?
  isPrimary    Boolean  @default(false)
  isActive     Boolean  @default(true)
  chainId      Int?
  metadata     String? // JSON metadata
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Token allowances granted to session wallet
  allowances TokenAllowance[]
  
  // EIP-7702 delegations
  delegations AccountDelegation[]

  user    User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  profile SmartProfile? @relation(fields: [profileId], references: [id], onDelete: SetNull)

  @@unique([userId, address, profileId]) // Prevent same EOA linked twice to same profile
  @@map("linked_accounts")
}

model TokenAllowance {
  id              String   @id @default(cuid())
  linkedAccountId String
  tokenAddress    String
  allowanceAmount BigInt
  chainId         Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  linkedAccount LinkedAccount @relation(fields: [linkedAccountId], references: [id], onDelete: Cascade)

  @@unique([linkedAccountId, tokenAddress, chainId])
  @@map("token_allowances")
}

model Folder {
  id          String   @id @default(cuid())
  profileId   String
  name        String
  position    Int      @default(0)
  isPublic    Boolean  @default(false)
  shareableId String?  @unique // For public sharing
  color       String? // Optional folder color
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  profile SmartProfile    @relation(fields: [profileId], references: [id], onDelete: Cascade)
  apps    BookmarkedApp[]

  @@map("folders")
}

model BookmarkedApp {
  id        String   @id @default(cuid())
  profileId String
  folderId  String?
  name      String
  url       String
  iconUrl   String?
  position  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  profile SmartProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  folder  Folder?      @relation(fields: [folderId], references: [id], onDelete: SetNull)

  @@map("bookmarked_apps")
}

model SocialProfile {
  id           String   @id @default(cuid())
  userId       String // Changed from profileId to userId
  provider     String // "farcaster", "telegram", "twitter", etc.
  providerId   String // External provider's user ID
  username     String?
  displayName  String?
  avatarUrl    String?
  accessToken  String? // Encrypted
  refreshToken String? // Encrypted
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, provider])
  @@unique([provider, providerId])
  @@map("social_profiles")
}

model Transaction {
  id             String    @id @default(cuid())
  profileId      String
  hash           String    @unique
  chainId        Int
  fromAddress    String
  toAddress      String
  value          BigInt
  gasUsed        BigInt?
  gasPrice       BigInt?
  status         String // "pending", "confirmed", "failed"
  blockNumber    Int?
  blockTimestamp DateTime?
  nonce          Int?

  // Interspace specific fields
  routingType   String? // "direct", "session_wallet", "batch"
  sourceAccount String? // Original EOA that initiated
  sessionWallet String? // Session wallet that executed
  targetApp     String? // dApp that was interacted with

  // Transaction data
  input String? // Transaction data
  logs  String? // JSON transaction logs

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile SmartProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

// System tables for app management
model AppMetadata {
  id          String   @id @default(cuid())
  url         String   @unique
  name        String
  description String?
  iconUrl     String?
  category    String?
  isVerified  Boolean  @default(false)
  tags        String // JSON array as string
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("app_metadata")
}

model SessionWalletFactory {
  id                    String   @id @default(cuid())
  chainId               Int
  factoryAddress        String
  implementationAddress String
  isActive              Boolean  @default(true)
  createdAt             DateTime @default(now())

  @@unique([chainId, factoryAddress])
  @@map("session_wallet_factories")
}

// Audit log for security
model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  profileId String?
  action    String
  resource  String
  details   String? // JSON details
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  profile SmartProfile? @relation(fields: [profileId], references: [id], onDelete: SetNull)

  @@map("audit_logs")
}

model SiweNonce {
  id        String    @id @default(cuid())
  nonce     String    @unique
  createdAt DateTime  @default(now())
  expiresAt DateTime
  usedAt    DateTime?

  @@index([expiresAt])
  @@map("siwe_nonces")
}

// Orby Integration Models
model PreferredGasToken {
  id                  String   @id @default(cuid())
  profileId           String   @unique
  standardizedTokenId String
  tokenSymbol         String // For display
  chainPreferences    String // JSON { chainId: tokenAddress }
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  profile SmartProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@map("preferred_gas_tokens")
}

model OrbyVirtualNode {
  id        String   @id @default(cuid())
  profileId String
  chainId   Int
  rpcUrl    String
  address   String // The injected address for this chain
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  profile SmartProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@unique([profileId, chainId])
  @@map("orby_virtual_nodes")
}

model OrbyOperation {
  id              String    @id @default(cuid())
  profileId       String
  operationSetId  String    @unique
  type            String // "swap", "transfer", "sign"
  status          String // "created", "signed", "pending", "successful", "failed"
  unsignedPayload String // JSON - Store the unsigned operations
  signedPayload   String? // JSON - Store after signing
  gasToken        String? // JSON - Gas token used
  metadata        String // JSON - Additional context
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  completedAt     DateTime?

  profile      SmartProfile      @relation(fields: [profileId], references: [id], onDelete: Cascade)
  transactions OrbyTransaction[]

  @@map("orby_operations")
}

model OrbyTransaction {
  id          String   @id @default(cuid())
  operationId String
  chainId     Int
  hash        String?
  status      String
  gasUsed     BigInt?
  createdAt   DateTime @default(now())

  operation OrbyOperation @relation(fields: [operationId], references: [id], onDelete: Cascade)

  @@map("orby_transactions")
}

// PasskeyCredential model removed - passkeys are now stored as Account entries with type='passkey' in V2

model MpcKeyShare {
  id          String   @id @default(cuid())
  profileId   String   @unique
  serverShare String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  profile SmartProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@map("mpc_key_shares")
}

model MpcKeyMapping {
  id               String   @id @default(cuid())
  profileId        String   @unique
  silenceLabsKeyId String   @unique // The key ID from Silence Labs Duo Server
  publicKey        String   // The public key for verification
  keyAlgorithm     String   @default("ecdsa") // "ecdsa" or "schnorr"
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  profile SmartProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@map("mpc_key_mappings")
}

model EmailVerification {
  id        String   @id @default(cuid())
  email     String
  code      String
  attempts  Int      @default(0)
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  // Rate limiting
  lastAttemptAt DateTime?
  
  // Link to user if verification is for existing user
  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([email, code])
  @@index([expiresAt])
  @@map("email_verifications")
}

model DragOperation {
  id        String   @id @default(cuid())
  profileId String
  userId    String
  type      String   // "reorder", "move", "batch_move", "batch_update"
  before    Json     // State before the operation
  after     Json     // State after the operation
  details   Json?    // Additional operation details
  undone    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId, createdAt])
  @@map("drag_operations")
}

// ==================== FLAT IDENTITY V2 MODELS ====================

model Account {
  id         String   @id @default(cuid())
  type       String   // 'wallet' | 'email' | 'social' | 'passkey' | 'guest'
  identifier String   // email address, wallet address, social ID
  provider   String?  // for social: 'google', 'apple', 'discord'
  verified   Boolean  @default(false)
  metadata   Json?    // flexible storage
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relationships
  identityLinksA    IdentityLink[]     @relation("AccountA")
  identityLinksB    IdentityLink[]     @relation("AccountB")
  profileAccounts   ProfileAccount[]
  sessions          AccountSession[]
  blacklistedTokens BlacklistedToken[]

  @@unique([type, identifier])
  @@map("accounts")
}

model IdentityLink {
  id              String   @id @default(cuid())
  accountAId      String
  accountBId      String
  linkType        String   @default("direct") // 'direct' | 'inferred'
  privacyMode     String   @default("linked") // 'linked' | 'partial' | 'isolated'
  confidenceScore Float?   // for inferred links
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relationships
  accountA Account @relation("AccountA", fields: [accountAId], references: [id])
  accountB Account @relation("AccountB", fields: [accountBId], references: [id])

  @@unique([accountAId, accountBId])
  @@map("identity_links")
}

model ProfileAccount {
  id          String   @id @default(cuid())
  profileId   String
  accountId   String
  isPrimary   Boolean  @default(false)
  permissions Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  profile SmartProfile @relation(fields: [profileId], references: [id])
  account Account      @relation(fields: [accountId], references: [id])

  @@unique([profileId, accountId])
  @@map("profile_accounts")
}

model AccountSession {
  id          String   @id @default(cuid())
  accountId   String
  sessionId   String   @unique
  deviceId    String?
  deviceName  String?
  ipAddress   String?
  userAgent   String?
  privacyMode String   @default("linked")
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  account Account @relation(fields: [accountId], references: [id])

  @@map("account_sessions")
}

// EIP-7702 Account Delegations
model AccountDelegation {
  id                String    @id @default(cuid())
  linkedAccountId   String
  sessionWallet     String
  chainId           Int
  delegationType    String    @default("eip7702")
  authorizationData Json      // Stores the signed authorization tuple
  permissions       Json      // Allowed operations: ['transfer', 'swap', 'approve', 'all']
  nonce             BigInt
  expiresAt         DateTime?
  isActive          Boolean   @default(true)
  revokedAt         DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relationships
  linkedAccount     LinkedAccount @relation(fields: [linkedAccountId], references: [id], onDelete: Cascade)
  
  @@index([linkedAccountId, sessionWallet, chainId])
  @@index([isActive, expiresAt])
  @@map("account_delegations")
}

// Batch Operations for multiple transactions
model BatchOperation {
  id              String    @id @default(cuid())
  profileId       String
  batchId         String    @unique // External batch ID for API
  status          String    // 'created', 'submitted', 'partial', 'completed', 'failed'
  operations      Json      // Array of operation intents
  results         Json?     // Execution results for each operation
  atomicExecution Boolean   @default(true)
  metadata        Json?     // Additional metadata
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  completedAt     DateTime?
  
  // Relationships
  profile SmartProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  
  @@index([profileId, status])
  @@index([batchId])
  @@map("batch_operations")
}
