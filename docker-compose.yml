# Production-oriented Docker Compose configuration
# For development, use docker-compose.dev.yml or docker-compose.local.yml

services:
  # PostgreSQL for local testing/staging
  postgres:
    image: postgres:15-alpine
    container_name: interspace-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
      POSTGRES_DB: ${POSTGRES_DB:-interspace}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - interspace-network
    profiles:
      - production
      - staging

  # Redis for distributed features
  redis:
    image: redis:7-alpine
    container_name: interspace-redis
    restart: unless-stopped
    command: >
      redis-server
      --appendonly yes
      --requirepass ${REDIS_PASSWORD:-changeme}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "-a", "${REDIS_PASSWORD:-changeme}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - interspace-network
    profiles:
      - production
      - staging

  # Application service
  app:
    build:
      context: .
      dockerfile: Dockerfile
    image: interspace-backend:latest
    container_name: interspace-backend
    restart: unless-stopped
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=${PORT:-3000}
      - DATABASE_URL=${DATABASE_URL:-postgresql://postgres:changeme@postgres:5432/interspace}
      - REDIS_ENABLED=${REDIS_ENABLED:-true}
      - REDIS_URL=${REDIS_URL:-redis://:changeme@redis:6379/0}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN:-15m}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - JWT_REFRESH_EXPIRES_IN=${JWT_REFRESH_EXPIRES_IN:-7d}
      - ENCRYPTION_SECRET=${ENCRYPTION_SECRET}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
      - LOG_EMAIL_CODES=${LOG_EMAIL_CODES:-false}
      # V2 API Settings
      - ENABLE_V2_API=${ENABLE_V2_API:-true}
      - AUTO_CREATE_PROFILE=${AUTO_CREATE_PROFILE:-true}
      - DEFAULT_PRIVACY_MODE=${DEFAULT_PRIVACY_MODE:-linked}
    ports:
      - "${APP_PORT:-3000}:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - interspace-network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G
    profiles:
      - production
      - staging

  # Cloud SQL Proxy for GCP deployments
  cloud-sql-proxy:
    image: gcr.io/cloudsql-docker/gce-proxy:latest
    container_name: interspace-cloud-sql-proxy
    restart: unless-stopped
    command: 
      - "/cloud_sql_proxy"
      - "-instances=${CLOUD_SQL_INSTANCE}"
      - "-credential_file=/config/gcp-service-account.json"
    ports:
      - "5433:5432"
    volumes:
      - ./gcp-service-account.json:/config/gcp-service-account.json:ro
    networks:
      - interspace-network
    profiles:
      - cloud

  # Database migration service
  migrate:
    build:
      context: .
      dockerfile: Dockerfile.migrate
    container_name: interspace-migrate
    environment:
      - DATABASE_URL=${DATABASE_URL}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - interspace-network
    profiles:
      - migrate

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local

networks:
  interspace-network:
    driver: bridge
